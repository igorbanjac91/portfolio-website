{"version":3,"sources":["webpack://website/./src/components/carousel.js"],"names":["console","log"],"mappings":"AAKAA,QAAQC,IAAI","file":"carousel.js","sourcesContent":["/*\n\n-------------- Tree Images Carousel -----------------\n\n*/\nconsole.log(\"hello!\")\n\n// import Desktop from \"./images/screenshots/planets-desktop.png\";\n// import Tablet from \"./images/screenshots/planets-tablet.png\";\n// import Mobile from \"./images/screenshots/planets-mobile.png\";\n\n\n// ---------------------- Carousel ----------------------\n\nfunction carousel(image1, image2, image3) {\n  let track = document.querySelector(\".carousel__track\")\n  let leftButton = document.querySelector(\".carousel__button--left\")\n  let rightButton = document.querySelector(\".carousel__button--right\")\n  let carouselNav = document.querySelector(\".carousel__nav\");\n  let indicators = Array.from(carouselNav.children);\n  let slides = Array.from(track.children);\n  let slide1 = document.querySelector(\".carousel__slide-1\");\n  let slide2 = document.querySelector(\".carousel__slide-2\");\n  let slide3 = document.querySelector(\".carousel__slide-3\");\n  let rightEdgeSlide;\n  let leftEdgeSlide;\n\n  let translationComplete = true;\n\n  const desktopScreenshot = new Image();\n  const tableScreenshot = new Image();\n  const mobileScreenshot = new Image();\n\n  desktopScreenshot.src = image1;\n  tableScreenshot.src = image2;\n  mobileScreenshot.src = image3;\n\n\n  slide1.appendChild(mobileScreenshot);\n  slide2.appendChild(tableScreenshot);\n  slide3.appendChild(desktopScreenshot);\n\n  const slideWidth = slide1.getBoundingClientRect().width;\n\n  addEdgeSlides(slide1, slide3)\n\n  slides.forEach(setSlidePosition);\n\n  // ---------------------------- Events ------------------------------------\n\n  rightButton.addEventListener(\"click\", e => {\n    if (translationComplete) {\n      translationComplete = false;\n      const currentIndicator = carouselNav.querySelector(\".current-slide\");\n      const currentSlide = track.querySelector('.current-slide');\n      const nextSlide = currentSlide.nextElementSibling;\n      track.style.transitionDuration = \"250ms\";\n      if (nextSlide === rightEdgeSlide) {\n        updateIndiactors(currentIndicator, indicators[0]);\n        moveToSlide(track, currentSlide, nextSlide);\n        track.addEventListener(\"transitionend\", function resetPosition(){\n          track.style.transitionDuration = \"0s\";\n          const currentSlide = track.querySelector('.current-slide');\n          const nextSlide = slide1;\n          moveToSlide(track, currentSlide, nextSlide );\n          slides[0].classList.add(\"current-slide\");\n          rightEdgeSlide.classList.remove(\"current-slide\");\n          track.removeEventListener(\"transitionend\", resetPosition)\n        })\n        return\n      }\n      const nextIndicator = currentIndicator.nextElementSibling;\n      updateIndiactors(currentIndicator, nextIndicator)\n      moveToSlide(track, currentSlide, nextSlide);\n    }\n  })\n\n\n  leftButton.addEventListener(\"click\", e => {\n    if (translationComplete) {\n      const currentSlide = track.querySelector('.current-slide');\n      const previusSlide = currentSlide.previousElementSibling;\n      const currentIndicator = carouselNav.querySelector(\".current-slide\");\n      track.style.transitionDuration = \"250ms\";\n      if (previusSlide === leftEdgeSlide) {\n        updateIndiactors(currentIndicator, indicators[indicators.length - 1]);\n        moveToSlide(track, currentSlide, previusSlide);\n        track.addEventListener(\"transitionend\", function resetPosition(){\n          track.style.transitionDuration = \"0s\";\n          const currentSlide = track.querySelector('.current-slide');\n          const previusSlide = slide3;\n          moveToSlide(track, currentSlide, previusSlide );\n          slides[slides.length -1].classList.add(\"current-slide\");\n          leftEdgeSlide.classList.remove(\"current-slide\");\n          track.removeEventListener(\"transitionend\", resetPosition)\n        })\n        return\n      }\n      moveToSlide(track, currentSlide, previusSlide);\n      const previusIndicator = currentIndicator.previousElementSibling;\n      updateIndiactors(currentIndicator, previusIndicator)\n    }\n  })\n\n  carouselNav.addEventListener(\"click\", e => {\n    if (translationComplete) {\n      const targetIndicator = e.target.closest('button');\n      if (!targetIndicator) return;\n      const currentSlide = track.querySelector('.current-slide');\n      const currentIndicator = carouselNav.querySelector('.current-slide')\n      const targetIndex = indicators.findIndex(indicator => indicator === targetIndicator)\n      const targetSlide = slides[targetIndex];\n      moveToSlide(track, currentSlide, targetSlide)\n      updateIndiactors(currentIndicator, targetIndicator)\n    }\n  })\n\n  // ---------------------------- Functions ------------------------------------\n\n  function addEdgeSlides(firstSlide, lastSlide) {\n    rightEdgeSlide = firstSlide.cloneNode(true);\n    rightEdgeSlide.classList.remove(\"current-slide\")\n    rightEdgeSlide.classList.remove(\"carousel__slide-1\");\n    rightEdgeSlide.classList.add(`carousel_slide-${slides.length}`);\n    rightEdgeSlide.style.left = `${slideWidth * slides.length}px`;\n\n    leftEdgeSlide = lastSlide.cloneNode(true);\n    leftEdgeSlide.classList.remove(\"current-slide\")\n    leftEdgeSlide.classList.remove(\"carousel__slide-3\");\n    leftEdgeSlide.classList.add(\"carousel__slide-0\");\n    leftEdgeSlide.style.left = `${-slideWidth}px`\n\n    track.appendChild(rightEdgeSlide);\n    track.prepend(leftEdgeSlide);\n  }\n\n\n  function updateIndiactors(currentIndicator, targetIndicator) {\n    if(!targetIndicator) {\n      return\n    }\n    currentIndicator.classList.remove(\"current-slide\");\n    targetIndicator.classList.add(\"current-slide\");\n  }\n\n\n  function moveToSlide(track, currentSlide, targetSlide) {\n    if (!targetSlide) {\n      return\n    }\n    let sign = targetSlide.style.left[0]\n    if (sign === \"-\") {\n      track.style.transform = `translateX(${targetSlide.style.left.substring(1)})`;  \n    } else {\n      track.style.transform = `translateX(-${targetSlide.style.left})`;\n    }\n    currentSlide.classList.remove(\"current-slide\");\n    targetSlide.classList.add(\"current-slide\");\n    track.addEventListener(\"transitionend\", () => {\n      translationCompleted()\n    })\n  }\n\n  function setSlidePosition(slide, index) {\n    slide.style.left = `${slideWidth * index}px`;\n  }\n\n  function translationCompleted() {\n    translationComplete = true;\n  }\n}\n\n"],"sourceRoot":""}